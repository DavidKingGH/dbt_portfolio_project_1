version: 2

models:

- name: mrt__acquisition_device_cohorts
  description: |
    "Calculates monthly user acquisition cohorts based on the device of their first session. It tracks monthly revenue, orders, 
    and purchaser counts for each cohort over time."
  config: 
    tags: ['gold', 'behavioral_cohorts', 'devices']
    contract: 
      enforced: true

  data_tests:
    - dbt_utils.unique_combination_of_columns:
        arguments:
          combination_of_columns: 
            - acquisition_device
            - acquisition_month
            - months_since_acquisition
      
    - dbt_utils.expression_is_true:
        name: orders_exceed_purchasers
        arguments:
          expression: "orders >= purchasers"
    
    - dbt_utils.expression_is_true:
        name: revenue_matches_orders
        arguments:
          expression: "(orders = 0 AND total_revenue = 0) OR (orders > 0 AND total_revenue > 0)"
          config:
            severity: warn

  columns: 
    - name: acquisition_device
      description: "Device type of user's first session"
      data_type: varchar
      constraints: 
        - type: not_null
      data_tests: 
        - accepted_values: 
            arguments: 
              values: ['mobile', 'tablet', 'desktop']
    - name: acquisition_month
      description: "Month when user first appeared (YYYY-MM-01)"
      data_type: date
      constraints:
        - type: not_null
    - name: months_since_acquisition
      description: "Months elapsed since acquisition (0 = same month)"
      data_type: int
      data_tests: 
        - dbt_utils.expression_is_true:
            arguments: 
              expression: "(months_since_acquisition >= 0) or (months_since_acquisition is null)"
    - name: total_revenue
      description: "Sum of revenue for this cohort-month combination"
      data_type: decimal
      constraints: 
        - type: not_null
      data_tests:
        - dbt_utils.expression_is_true:
            arguments: 
              expression: ">= 0"  
    - name: orders
      description: "Count of orders for this cohort-month combination"
      data_type: int
      constraints: 
        - type: not_null
      data_tests:
        - dbt_utils.expression_is_true:
            arguments: 
              expression: ">= 0"  
    - name: purchasers
      description: "Count of unique users who purchased in this cohort-month"
      data_type: int
      constraints: 
        - type: not_null
      data_tests:
        - dbt_utils.expression_is_true:
            arguments: 
              expression: ">= 0"  

- name: mrt__user_device_segments
  description: |
    "Segments users based on their dominant purchasing device and assigns them to a spending quartile relative 
    to other users on the same device type."
  columns: 
    - name: user_id
      data_tests: 
        - not_null
        - unique
        - relationships:
            arguments:
              to: ref('stg__user_orders')
              field: user_id
    - name: dominant_device
      data_tests: 
        - not_null
        - accepted_values: 
            arguments: 
              values: ['mobile', 'tablet', 'desktop']
    - name: total_revenue
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
    - name: cart_value_quartile
      data_tests:
        - not_null
        - accepted_values: 
            arguments: 
              values: [1,2,3,4]
    - name: segment_name
      data_tests:
        - not_null
- name: mrt__campaign_performance_rev_metrics
  description: |
    "Segments users based on their dominant purchasing device and assigns them to a spending quartile relative 
    to other users on the same device type."
  data_tests:
    - dbt_utils.expression_is_true:
        name: revenue_matches_conversions
        arguments:
          expression: "(converting_users = 0 AND total_revenue = 0) OR (converting_users > 0 AND total_revenue >0)"
          config:
              severity: warn
  columns:
    - name: session_source
      data_tests:
        - not_null
        - dbt_utils.not_empty_string
    - name: session_medium
      data_tests:
        - not_null
        - dbt_utils.not_empty_string
    - name: total_revenue
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
    - name: total_users
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
    - name: converting_users
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
        - dbt_utils.expression_is_true:
            arguments:
              expression: "<= total_users"
    - name: average_order_value
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
- name: mrt__first_touch_ltv
  description: "..."
  data_tests:
    - dbt_utils.expression_is_true:
        name: avg_ltv_calculation_correct
        arguments:
          expression: "ABS(average_ltv_by_channel - (total_purchase_value_from_cohort / NULLIF(acquired_customers, 0))) < 0.01"
          config:
              severity: warn
    - dbt_utils.expression_is_true:
        name: customers_imply_revenue
        expression: "(acquired_customers > 0 AND total_purchase_value_from_cohort > 0) OR (acquired_customers = 0 AND total_purchase_value_from_cohort = 0)"
        config:
          severity: warn
  columns:
    - name: session_source
      data_tests:
        - not_null
        - dbt_utils.not_empty_string
    - name: session_medium
      data_tests:
        - not_null
        - dbt_utils.not_empty_string
    - name: acquired_customers
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: "> 0"
    - name: total_purchase_value_from_cohort
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
    - name: average_ltv_by_channel
      data_tests:
        - not_null
        - dbt_utils.expression_is_true:
            arguments:
              expression: ">=0"
- name: mrt__conversion_funnel
  description:  Aggregate conversion funnel showing session drop-off at each purchase step
  
  config:
    contract:
      enforced: true
  
  data_tests:
    - dbt_utils.expression_is_true:
        name: funnel_logic_valid
        expression: |
          sessions_with_view_item >= sessions_with_add_to_cart
          AND sessions_with_add_to_cart >= sessions_with_begin_checkout
          AND sessions_with_begin_checkout >= sessions_with_add_shipping
          AND sessions_with_add_shipping >= sessions_with_add_payment
          AND sessions_with_add_payment >= sessions_with_purchase
          AND sessions_with_purchase >= 0
    - dbt_utils.expression_is_true:
        name: has_data
        expression: "sessions_with_view_item > 0"
  
  columns:
    - name: sessions_with_view_item
      data_type: integer
      constraints:
        - type: not_null
    - name: sessions_with_add_to_cart
      data_type: integer
      constraints:
        - type: not_null
    - name: sessions_with_begin_checkout
      data_type: integer
      constraints:
        - type: not_null
    - name: sessions_with_add_shipping
      data_type: integer
      constraints:
        - type: not_null
    - name: sessions_with_add_payment
      data_type: integer
      constraints:
        - type: not_null
    - name: sessions_with_purchase
      data_type: integer
      constraints:
        - type: not_null
- name: mrt__first_touch_attribution
  description: first-touch attribution per purchase 
  config:
    tags: ['gold', 'marketing_attribution']
    contract:
      enforced: true
  data_tests:
    - dbt_utils.expression_is_true:
        name: purchase_after_first_touch
        arguments:
          expression: "purchase_timestamp >= touchpoint_timestamp "
    - dbt_utils.unique_combination_of_columns: 
        name: confirm_grain
        arguments: 
          combination_of_columns: ['purchase_id', 'user_id']
    - dbt_utils.expression_is_true:
        name: has_revenue
        arguments:
          expression: "purchase_revenue >= 0"
  columns: 
    - name: purchase_id
      description: primary key
      data_type: varchar
      data_tests:
        - not_null
        - unique
        - relationships:
            arguments: 
              to: ref('int__purchase_touchpoints')
              field: purchase_id
      constraints:
        - type: not_null
        - type: unique

    - name: user_id
      data_type: varchar
      data_tests:
        - not_null
      constraints: 
        - type: not_null
    - name: purchase_revenue
      data_type: float
      data_tests:
        - not_null
      constraints:
        - type: not_null
    - name: purchase_timestamp
      data_type: timestamp
      data_tests:
        - not_null
      constraints:
        - type: not_null
    - name: touchpoint_timestamp
      data_type: timestamp
      data_tests:
        - not_null
      constraints:
        - type: not_null
    - name: touchpoint_source
      data_type: varchar

    - name: touchpoint_medium
      data_type: varchar

    
- name: mrt__last_touch_attribution
  description: last-touch attribution per purchase 
  config:
    tags: ['gold', 'marketing_attribution']
    contract:
      enforced: true
  data_tests:
    - dbt_utils.expression_is_true:
        name: purchase_after_last_touch
        arguments:
          expression: "purchase_timestamp >= touchpoint_timestamp "
    - dbt_utils.unique_combination_of_columns: 
        name: confirm_grain
        arguments: 
          combination_of_columns: ['purchase_id', 'user_id']
    - dbt_utils.expression_is_true:
        name: has_revenue
        arguments:
          expression: "purchase_revenue >= 0"
  columns: 
    - name: purchase_id
      description: primary key
      data_type: varchar
      data_tests:
        - not_null
        - unique
        - relationships:
            arguments: 
              to: ref('int__purchase_touchpoints')
              field: purchase_id
      constraints:
        - type: not_null
        - type: unique

    - name: user_id
      data_type: varchar
      data_tests:
        - not_null
      constraints: 
        - type: not_null
    - name: purchase_revenue
      data_type: float
      data_tests:
        - not_null
      constraints:
        - type: not_null
    - name: purchase_timestamp
      data_type: timestamp
      data_tests:
        - not_null
      constraints:
        - type: not_null
    - name: touchpoint_timestamp
      data_type: timestamp
      data_tests:
        - not_null
      constraints:
        - type: not_null
    - name: touchpoint_source
      data_type: varchar

    - name: touchpoint_medium
      data_type: varchar
- name: mrt__rfm
  description: "RFM (Recency, Frequency, Monetary) segmentation for customer value analysis based on 365-day window"
  config:
    tags: ['gold', 'rfm_segmentation']
    contract:
      enforced: true
  data_tests:
    - dbt_utils.unique_combination_of_columns:
        name: confirm_grain 
        arguments:
          combination_of_columns: ['user_id','as_of_date']
    - dbt_utils.expression_is_true: 
        name: last_purchase_before_analysis_date
        arguments:
          expression: "max_purchase_date <= as_of_date"
    - dbt_utils.expression_is_true:
        name: valid_rfm_metrics
        arguments: 
          expression: "frequency >= 0 AND monetary >= 0 AND recency >= 0"
    - dbt_utils.expression_is_true:
        name: recency_matches_calculation
        expression: "recency = date_diff('day', max_purchase_date, as_of_date)"
        config:
          severity: warn
  
  columns:
  - name: user_id
    description: "Primary key - one row per customer."
    data_type: varchar
    constraints:
      - type: unique
      - type: not_null
  - name: recency
    description: "Days since last purchase (lower = more recent)"
    data_type: int
    constraints: 
      - type: not_null

  - name: frequency
    description: "Number of purchases in last 365 days"
    data_type: int
    constraints: 
      - type: not_null

  - name: monetary
    description: "Total revenue in last 365 days"
    data_type: decimal
    constraints: 
      - type: not_null

  - name: max_purchase_date
    description: "Date of customer's most recent purchase (any time period)"
    data_type: date
    constraints:
      - type: not_null
  
  - name: as_of_date
    description: "Analysis cutoff date (max date in dataset)"
    data_type: date
    constraints:
      - type: not_null

- name: mrt__rfm_scoring
  description: "RFM (Recency, Frequency, Monetary) segmentation for customer value analysis based on 365-day window"
  config:
    tags: ['gold', 'rfm_segmentation']
    contract:
      enforced: true
  data_tests:
    - dbt_utils.unique_combination_of_columns:
        name: confirm_grain 
        arguments:
          combination_of_columns: ['user_id','as_of_date']
    - dbt_utils.expression_is_true:
        name: all_customers_segmented
        expression: "rfm_segment != 'other'"
        config:
          severity: warn  # Warn if some fall into 'other' 
  columns:
  - name: user_id
    description: "Primary key - one row per customer."
    data_type: varchar
    constraints:
      - type: not_null
    data_tests: 
      - relationships: 
          arguments: 
            to: ref('mrt__rfm')
            field: user_id
  - name: recency
    description: "Days since last purchase (lower = more recent)"
    data_type: int
    constraints: 
      - type: not_null
  - name: frequency
    description: "Number of purchases in last 365 days"
    data_type: int
    constraints: 
      - type: not_null
  - name: monetary
    description: "Total revenue in last 365 days"
    data_type: decimal
    constraints: 
      - type: not_null
  - name: as_of_date
    description: "Snapshot date for scoring"
    data_type: date
    constraints: 
      - type: not_null
  - name: r_score
    description: "Recency quintiles (5=most recent, 1=least recent)"
    data_type: int
    constraints:
      - type: not_null
    data_tests:
      - dbt_utils.expression_is_true: 
          arguments:
            expression: "BETWEEN 1 AND 5"
  - name: f_score
    description: "Frequency quintiles (5=most frequent, 1=least frequent)"
    data_type: int
    constraints:
      - type: not_null
    data_tests:
      - dbt_utils.expression_is_true: 
          arguments:
            expression: "BETWEEN 1 AND 5"
  - name: m_score
    description: "Monetary quintiles (5=most value, 1=least value)"
    data_type: int
    constraints:
      - type: not_null
    data_tests:
      - dbt_utils.expression_is_true: 
          arguments:
            expression: "BETWEEN 1 AND 5"
  - name: rfm_segment
    description: "User categories per rfm performance"
    data_type: varchar
    constraints: 
      - type: not_null
    